#!/bin/bash
#
# Forked from statianzo/dokku-shoreman

APP="$1"; IMAGE="app/$APP"

read -d '' shoreman <<'EOF'
set -e
export HOME=/app
for file in \$HOME/.profile.d/*; do source \$file; done
hash -r
cd \$HOME

PROCFILE=\${PROCFILE:-'Procfile'}
while read line || [ -n "\$line" ]; do
  name=\${line%%:*}
  command=\${line#*: }
  echo "Starting \${name}..."
  sh -c "\${command} | sed -e 's/^/\${name}| /'" &
done < "\$PROCFILE"


onexit() {
  echo SIGINT received
  echo sending SIGTERM to all processes
  children=\$(ps --ppid=\$\$ -o pid='')
  kill -- \$children &> /dev/null
  sleep 1
}
trap onexit SIGTERM SIGINT EXIT

wait
EOF

set -e

check_procfile_exists() {
  _procfile="$1"

  id=$(docker run -d $IMAGE test -f "app/$_procfile")
  if [ $(docker wait $id) -ne 0 ]; then
    return 0
  fi
  return 1
}

PROCFILE='Procfile'
RUNTIME_ENV=${RACK_ENV:-$RAILS_ENV}

# TODO: actually loop this to check various Procfile possiblities
if [[ ! -z "$RUNTIME_ENV" ]] && [[ `env | grep -q "^$RUNTIME_ENV="` -eq 0 ]]; then
  PROCFILE="Procfile.${RUNTIME_ENV}"
  check_procfile_exists "$PROCFILE"
  ret=$?
  if [[ "$ret" -ne 0 ]]; then
    exit 0 # this is not a typo
  fi
fi

echo "-----> Injecting Shoreman ..."

header="#!/bin/bash\n\nexport PROCFILE=$PROCFILE"

# TODO: combine the two cat statements to avoid an extra docker layer 
id=$(docker run -i -a stdin $IMAGE /bin/bash -c "cat << EOF > /start
#!/bin/bash
#
export PROCFILE=\"$PROCFILE\"
EOF")
test $(docker wait $id) -eq 0
docker commit $id $IMAGE > /dev/null

id=$(echo "$shoreman" | docker run -i -a stdin $IMAGE /bin/bash -c "cat >> /start")
test $(docker wait $id) -eq 0
docker commit $id $IMAGE > /dev/null
